.fr-table--c-annuaire
  %table
    %thead
      -# For the subjects columns, we'll build our header on 3 rows: theme, subject and institutions_subject.
      %tr
        -# The first 3 columns are for the antenne, team, and user names, spanning the 4 header rows.
        %th{ rowspan: 2 }
        %th{ rowspan: 2 }= User.human_attribute_name(:team_full_name)
        %th{ rowspan: 2 }= User.human_attribute_name(:user)
        -# Subjects columns, first row: the themes, column-spanned for the two remaining header rows
        - @data[:themes].each do |theme|
          %th{ colspan: theme[:subjects].size }= theme[:label]
      - subjects = @data[:themes].flat_map{|t| t[:subjects] }
      %tr.subjects
        -# Subjects columns, first row: the subjects, column-spanned for the remaining header row
        -# TODO : colspan: institutions_subjects.size ?
        - subjects.each do |subject|
          %th{ colspan: 1, title: subject[:label] }= subject[:label].truncate(30)
      %tr.users-count
        %th{ colspan: 3 } Nombre d'experts
        - subjects.each do |subject|
          -# TODO : cf build_count_experts_cell pour classe + icone
          = build_better_count_experts_cell(subject[:expert_in_subject_count])
          -# TODO : integration subject_managed_by_other_territorial_level
      %tr.missing-territories-count
        %th{ colspan: 3 }= t('.missing_territories')
        - subjects.each do |subject|
          - if subject[:missing_territories].blank?
            %th{ colspan: 1 }
              0
          - else
            = render 'missing_territories', subject: subject
        -# - if local_assigns[:antenne] && antenne.regional_antenne.present?
        -#   %tr.regional-users-count
        -#     %th{ colspan: 3 }= antenne.regional_antenne.name
        -#     - grouped_subjects.each_value do |subjects|
        -#       - subjects.each do |subject, institutions_subjects|
        -#         - institutions_subjects.each do |institution_subject|
        -#           - experts = institution_subject.not_deleted_experts.with_users
        -#           - experts &= antenne.regional_antenne&.experts || []
        -#           - regional_count = experts.count
        -#           %th.right.aligned{ title: t('.regional_experts_on_subject', count: regional_count),
        -#           class: '' }
        -#             = regional_count

    %tbody
      -# `users` contains multiple rows for the same users, for each of their team. (See User.relevant_for_skills)
        We’ll group by Antenne and by Expert team, and span the first two columns as needed.
      - @data[:antennes].each do |antenne|
        - antenne_users_ids = antenne[:experts].flat_map{|e| e[:users]}.flat_map{|u| u[:id]}
        - highlighted_ids = flash[:table_highlighted_ids] || []
        - highlighted_class = (highlighted_ids & antenne_users_ids).any? ? 'blue' : ''

        - antenne[:experts].each_with_index do |expert, expert_index|
          - expert[:users].each_with_index do |user, user_index|
            %tr
              - if expert_index == 0 && user_index == 0
                - users_count = antenne[:experts].flat_map{|e| e[:users]}.size
                %td.td-header{ rowspan: users_count }
                  = link_to antenne[:name], admin_antenne_path(antenne[:id])
              - if user_index == 0
                %td.td-header{ rowspan: expert[:users].size }
                  = link_to expert[:name], admin_expert_path(expert[:id])
              %td.td-header
                = build_user_name_cell2(user, antenne)

            -#
            -# - if user_index == 0
            -#   %td.td-header{ rowspan: expert[:users].size }
            -#     = expert[:name]
            -#
            -# - unless user_index == 0
            -#   %tr
            -#
            -# %td.td-header{ rowspan: 1 }
            -#   = user[:name]

        -# - teams.each_with_index do |key_and_value, index_in_antenne|
        -#   - users = key_and_value.last
        -#   - users.each_with_index do |user, index_in_team|
        -#     - team_first_row = index_in_team == 0
        -#     - antenne_first_row = index_in_antenne == 0 && team_first_row
        -#     - antenne_separation_class = antenne_first_row ? 'tr--distinct' : ''
        -# %tr{ class: [antenne_separation_class, highlighted_class].compact.join(" ") }
        -#   - if antenne_first_row
        -#     %td.td-header{ rowspan: teams.values.sum(&:size) }
        -#       = link_to antenne, admin_antenne_path(antenne)
        -#   - if index_in_team == 0
        -#     %td.td-header{ rowspan: users.size }
        -#       - if user.relevant_expert.team?
        -#         = link_to user.relevant_expert.full_name, edit_admin_expert_path(user.relevant_expert), title: t('.edit_expert', expert_name: user.relevant_expert.full_name, antenne: antenne)

        -#     %td.td-header.td-user
        -#       = build_user_name_cell(user, antenne)
        -#     - if index_in_team == 0
        -#       - grouped_subjects.each_value do |subjects|
        -#         - subjects.each do |subject, institutions_subjects|
        -#           - institutions_subjects.each do |institution_subject|
        -#             -# We’re using `&` instead of .merge to use the preloaded relations instead of doing a new DB query.
        -#             - experts_subjects = user.relevant_expert.experts_subjects & institution_subject.experts_subjects
        -#             - raise 'There should only be one ExpertSubject' if experts_subjects.size > 1
        -#             - expert_subject = experts_subjects.first
        -#             -# The InstitutionSubjects cells themselves are spanned on all the rows of the members of the expert team.
        -#             %td{ rowspan: users.size, class: ('yellow' if expert_subject.present?) }
        -#               - if expert_subject.present?
        -#                 - intervention_criteria = expert_subject.intervention_criteria
        -#                 - if intervention_criteria.present?
        -#                   %a.popup-hover.dashed= t('yes')
        -#                   .ui.popup= intervention_criteria
        -#                 - else
        -#                   = t('yes')
