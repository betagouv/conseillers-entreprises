.fr-table--c-annuaire
  %table
    %thead
      -# For the subjects columns, we'll build our header on 3 rows: theme, subject and institutions_subject.
      %tr
        -# The first 3 columns are for the antenne, team, and user names, spanning the 4 header rows.
        %th{ rowspan: 3 }
        %th{ rowspan: 3 }= User.human_attribute_name(:team_full_name)
        %th{ rowspan: 3 }= User.human_attribute_name(:user)
        -# Subjects columns, first row: the themes, column-spanned for the two remaining header rows
        - grouped_subjects.each do |theme, subjects|
          %th{ colspan: subjects.values.sum(&:size) }= theme.label
      %tr.subjects
        -# Subjects columns, first row: the subjects, column-spanned for the remaining header row
        - grouped_subjects.each_value do |subjects|
          - subjects.each do |subject, institutions_subjects|
            %th{ colspan: institutions_subjects.size, title: subject.label }= subject.label.truncate(30)
      %tr.users-count
        - grouped_subjects.each_value do |subjects|
          - subjects.each do |subject, institutions_subjects|
            - institutions_subjects.each do |institution_subject|
              - experts = institution_subject.not_deleted_experts.with_users
              - if session[:annuaire_region_id].present?
                - experts = experts.joins(:regions).where(territories: { id: session[:annuaire_region_id] }).distinct
              - if local_assigns[:antenne]
                - experts &= antenne.experts
              - count = experts.count
              - anomalie_less = count == 0
              - anomalie_more = local_assigns[:antenne] && count > 1
              %th.right.aligned{ title: t('.experts_on_subject', count: count, subject: institution_subject.description),
              class: (('red' if anomalie_less && !institution_subject.optional) || ('orange' if anomalie_more)) }
                = count
                - if anomalie_less && !institution_subject.optional
                  %span.red.ri-error-warning-fill
                - if anomalie_more
                  %span.orange.ri-error-warning-fill
        - if local_assigns[:antenne] && antenne.regional_antenne.present?
          %tr.users-count
            %th{ colspan: 3 }= antenne.regional_antenne.name
            - grouped_subjects.each_value do |subjects|
              - subjects.each do |subject, institutions_subjects|
                - institutions_subjects.each do |institution_subject|
                  - experts = institution_subject.not_deleted_experts.with_users
                  - experts &= antenne.regional_antenne&.experts || []
                  - regional_count = experts.count
                  %th.right.aligned{ title: t('.experts_on_subject', count: regional_count, subject: institution_subject.description),
                  class: '' }
                    = regional_count


    %tbody
      -# `users` contains multiple rows for the same users, for each of their team. (See User.relevant_for_skills)
        We’ll group by Antenne and by Expert team, and span the first two columns as needed.
      - grouped_users = users.select(:antennes).group_by(&:antenne).transform_values{ |users| users.group_by(&:relevant_expert) }
      - highlighted_antennes_ids = flash[:highlighted_antennes_ids]
      - grouped_users.each do |antenne, teams|
        - next if highlighted_antennes_ids.present? && flash[:highlighted_antennes_ids].exclude?(antenne.id)
        - teams.each_with_index do |key_and_value, index_in_antenne|
          - users = key_and_value.last
          - users.each_with_index do |user, index_in_team|
            - highlighted_ids = flash[:table_highlighted_ids]
            - team_first_row = index_in_team == 0
            - antenne_first_row = index_in_antenne == 0 && team_first_row
            - antenne_separation_class = antenne_first_row ? 'tr--distinct' : ''
            - highlighted_class = highlighted_ids&.include?(user.id) ? 'blue' : ''
            %tr{ class: [antenne_separation_class, highlighted_class].compact.join(" ") }
              - if antenne_first_row
                %td.td-header{ rowspan: teams.values.sum(&:size) }
                  = link_to antenne, admin_antenne_path(antenne)
              - if index_in_team == 0
                %td.td-header{ rowspan: users.size }
                  - if user.relevant_expert.team?
                    = link_to user.relevant_expert.full_name, edit_admin_expert_path(user.relevant_expert), title: t('.edit_expert', expert_name: user.relevant_expert.full_name, antenne: antenne)
              %td.td-header.td-user
                = link_to user.full_name, edit_admin_expert_path(user.relevant_expert), title: t('.edit_expert', expert_name: user.relevant_expert.full_name, antenne: antenne)
                - if user.invitation_sent_at.nil?
                  %span.ri-mail-add-fill.blue
              - if index_in_team == 0
                - grouped_subjects.each_value do |subjects|
                  - subjects.each do |subject, institutions_subjects|
                    - institutions_subjects.each do |institution_subject|
                      -# We’re using `&` instead of .merge to use the preloaded relations instead of doing a new DB query.
                      - experts_subjects = user.relevant_expert.experts_subjects & institution_subject.experts_subjects
                      - raise 'There should only be one ExpertSubject' if experts_subjects.size > 1
                      - expert_subject = experts_subjects.first
                      -# The InstitutionSubjects cells themselves are spanned on all the rows of the members of the expert team.
                      %td{ rowspan: users.size, class: ('yellow' if expert_subject.present?) }
                        - if expert_subject.present?
                          - intervention_criteria = expert_subject.intervention_criteria
                          - if intervention_criteria.present?
                            %a.popup-hover.dashed= t('yes')
                            .ui.popup= intervention_criteria
                          - else
                            = t('yes')
