- content_for :header, render('solicitations/header', landing: @landing, landing_subject: @landing_subject, step_data: @step_data, needs_count: @needs_count)

- content_for :step_data do
  = render 'solicitations/steps', step_data: @step_data

.fr-grid-row
  .fr-col-12.fr-col-md-6.fr-col-offset-md-3.multistep-form.fr-pb-3w
    - if @solicitation.company_step_is_siret?
      .fr-mb-4w
        .fr-callout
          %p.fr-callout__text.fr-text--sm= t("solicitations.creation_form.empty_result_help_html", path: step_company_search_solicitation_path(@solicitation.uuid, anchor: 'section-breadcrumbs'))

    = form_with(model: @solicitation, url: update_step_company_solicitation_path(@solicitation.uuid), local: true, html: { honeypot: true, data: { turbo: false } }) do |f|
      .fr-fieldset
        - @solicitation.company_step_required_fields.each do |field|
          .fr-fieldset__element
            .fr-input-group
              - if field == :siret
                = f.label :siret, class: 'fr-label' do
                  = t("solicitations.creation_form.siret")
                  %span.fr-hint-text= t('attributes.help.no_creation_html')
                = f.text_field :siret, placeholder: t("solicitations.creation_form.placeholder.#{field}"), class: 'fr-input white-bg', minlength: '9', maxlength: '18'
              - if field == :location
                = f.label :location, class: 'fr-label' do
                  = t("attributes.#{field}")
                  %span.fr-hint-text= t('attributes.help.location')
                %div{ data: { action: 'city-autocomplete', id: 'solicitation_location', name: 'solicitation[location]' } }
              - else
                - help = t(".attributes.help.#{field}_html", default: [:".attributes.help.#{field}", ''])
                = f.label field, class: 'fr-label' do
                  = t("attributes.#{field}")
                  - if help.present?
                    %span.fr-hint-text= help
                = f.text_field field,
                  placeholder: t("solicitations.creation_form.placeholder.#{field}"),
                  type: Solicitation::FIELD_TYPES[field],
                  required: true,
                  class: 'fr-input white-bg'

          - if @solicitation.errors.present?
            .fr-error-text= @solicitation.errors.full_messages_for(field).to_sentence

      .submit-buttons
        = render 'previous_button', path: step_contact_solicitation_path(@solicitation.uuid, anchor: 'section-breadcrumbs')
        = render 'next_button'

- content_for :footer do
  = render 'iframe_footer', landing: @solicitation.landing
