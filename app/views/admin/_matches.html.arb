panel "#{I18n.t('activerecord.models.match.other')} (#{matches_relation.length})" do
  table_for matches_relation
    .includes(diagnosed_need: [diagnosis: [visit: [facility: :company]]])
    .includes(diagnosed_need: [diagnosis: [visit: :advisor]])
    .includes(:expert) do
    column(:id) do |match|
      link_to(match.id, admin_match_path(match))
    end
    column :created_at
    column(I18n.t('activerecord.attributes.visit.advisor')) do |match|
      advisor = match.diagnosed_need.diagnosis.visit.advisor
      link_to(advisor.full_name, admin_user_path(advisor))
    end
    column(I18n.t('activerecord.attributes.user.role')) do |match|
      advisor = match.diagnosed_need.diagnosis.visit.advisor
      advisor.role
    end
    column(I18n.t('activerecord.attributes.user.institution')) do |match|
      advisor = match.diagnosed_need.diagnosis.visit.advisor
      advisor.institution
    end
    column(I18n.t('activerecord.attributes.visit.facility')) do |match|
      match.diagnosed_need&.diagnosis&.visit&.facility
    end
    column(:diagnosed_need) do |match|
      need = match.diagnosed_need
      link_to(need.id, admin_diagnosed_need_path(need))
    end
    column(I18n.t('activerecord.attributes.diagnosed_need.question_label')) do |match|
      need = match.diagnosed_need
      need.question_label
    end
    column :expert_full_name do |match|
      expert = match.expert
      if expert.present?
        link_to(match.expert_full_name, admin_expert_path(expert))
      elsif match.relay.present?
        link_to(match.expert_full_name, admin_relay_path(match.relay))
      else
        I18n.t('active_admin.matches.deleted', expert: match.expert_description)
      end
    end
    column(I18n.t('activerecord.attributes.expert.local_office')) do |match|
      expert = match.expert
      if expert.present?
        expert.local_office
      elsif match.relay.present?
        match.relay.user.institution
      end
    end
    column :status do |match|
      I18n.t("activerecord.attributes.match.statuses.#{match.status}")
    end
    column('Page Référent') do |match|
      diagnosis_id = match.diagnosed_need.diagnosis_id
      if match.assistance_expert
        access_token = match.assistance_expert.expert.access_token
        link_to 'Page Référent', besoin_path(diagnosis_id, access_token: access_token)
      elsif match.relay
        user = match.relay.user
        link_to t('active_admin.user.impersonate', name: user.full_name), impersonate_engine.impersonate_user_path(user)
      end
    end
  end
end
