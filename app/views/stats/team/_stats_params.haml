= form_with url: request.url, method: :get, skip_enforcing_utf8: true, local: true do |f|
  .fr-grid-row.fr-py-3w.fr-mb-3w.white-bg#stats-params{ data: { controller: 'stats' } }

    .fr-col-12.fr-col-md-4.fr-p-2w
      .fr-input-group
        = f.label :start_date, t('stats.stats_params.start_date'), class: 'fr-label'
        .fr-input-wrap
          = f.date_field :start_date, { value: stats[:start_date], class: 'fr-input' }
      .fr-input-group
        = f.label :end_date, t('stats.stats_params.end_date'), class: 'fr-label'
        .fr-input-wrap
          = f.date_field :end_date, { value: stats[:end_date], class: 'fr-input' }
      .fr-select-group
        = f.label :territory, t('stats.stats_params.region'), class: 'fr-label'
        = f.collection_select :territory, Territory.regions.order(:name), :id, :name, { selected: params[:territory],
          include_blank: t('all.feminine') }, class: "fr-select"

    .fr-col-12.fr-col-md-4.fr-p-2w
      .fr-select-group
        = f.label :institution, t('activerecord.models.institution.one'), class: 'fr-label'
        = f.collection_select :institution, Institution.not_deleted.expert_provider.order(:name), :id, :name, { selected: params[:institution],
        include_blank: t('all.feminine') }, class: "fr-select", data: { action: 'change->stats#institutionFilters', 'stats-target': 'institution' }
      .fr-select-group
        - antenne_placeholder = params[:institution].present? ? t('all.feminine') : t('stats.stats_params.select_institution')
        = f.label :antenne, t('activerecord.models.antenne.one'), class: 'fr-label'


        = f.select :antenne, options_for_select(build_antennes_collection_for_select(institution_antennes) , selected: stats[:antenne]), {prompt: true}, class: "fr-select",  data: { 'stats-target': 'antennes' }

      .fr-select-group
        = f.label :theme, t('stats.stats_params.theme'), class: 'fr-label'
        = f.collection_select :theme, Theme.for_interview.order(:label), :id, :label, { selected: params[:theme],
          include_blank: t('all.feminine') }, class: "fr-select"
      .fr-select-group
        = f.label :subject, t('activerecord.models.subject.one'), class: 'fr-label'
        = f.collection_select :subject, Subject.not_archived.order(:label), :id, :label, { selected: params[:subject],
        include_blank: t('all.masculin') }, class: "fr-select", data: { 'stats-target': 'subjects' }

    .fr-col-12.fr-col-md-4.fr-p-2w
      .fr-input-group
        = f.label :mtm_campaign, t('stats.stats_params.campaign'), class: 'fr-label'
        = f.text_field :mtm_campaign, value: stats[:mtm_campaign], class: 'fr-input'
      .fr-input-group
        = f.label :mtm_kwd, t('stats.stats_params.keywords'), class: 'fr-label'
        = f.text_field :mtm_kwd, value: stats[:mtm_kwd], class: 'fr-input'
      .fr-select-group
        = f.label :integration, t('activerecord.attributes.landing.integration'), class: 'fr-label'
        = f.select :integration, Landing.integrations.map { |i| [I18n.t(i.first, scope: 'activerecord.attributes.landing/integrations'), i.first] },
        { selected: params[:integration], include_blank: t('all.feminine') }, class: "fr-select", data: { action: 'change->stats#toggleIframeSelect' }
      .fr-select-group{ class: "#{'hidden' if params[:iframe_id].blank?}" }
        = f.label :iframe_id, t('activerecord.attributes.landing.iframe'), class: 'fr-label'
        = f.select :iframe_id, iframes.map { |iframe| [iframe.slug, iframe.id] },
        { selected: params[:iframe_id], include_blank: t('all.feminine') }, class: "fr-select", data: { 'stats-target': 'iframes' }

    .fr-col-12.fr-p-2w
      .fr-input-group
        = f.submit t('stats.stats_params.filter'), class: 'fr-btn'
        -# Affiche le bouton s'il y a plus de filtres que les dates début et fin qui sont présentes dès le début
        - if stats.keys.count > 2
          = link_to t('stats.stats_params.clear_search'), request.fullpath.split('?').first, class: 'fr-btn fr-btn--secondary'
