= form_with url: request.url, method: :get, skip_enforcing_utf8: true, local: true do |f|
  .fr-grid-row.fr-grid-row--gutters.fr-mb-3w#stats-params{ data: { controller: 'filters', url: load_filter_options_conseiller_cooperations_path } }

    .fr-col-12.fr-col-md-4
      .fr-input-group
        = f.label :start_date, t('stats.stats_params.start_date'), class: 'fr-label'
        .fr-input-wrap
          = f.date_field :start_date, { value: params[:start_date], class: 'fr-input' }
      .fr-input-group
        = f.label :end_date, t('stats.stats_params.end_date'), class: 'fr-label'
        .fr-input-wrap
          = f.date_field :end_date, { value: params[:end_date], class: 'fr-input' }

    .fr-col-12.fr-col-md-4
      .fr-select-group
        = f.label :theme_id, class: 'fr-label' do
          = t('stats.stats_params.theme')
        = f.collection_select :theme_id, filters[:themes], :id, :label, { selected: params[:theme_id],
          include_blank: t('all.feminine') }, class: "fr-select", data: { action: 'change->filters#fetchFilters', 'filters-target': 'themes' }
      .fr-select-group
        = f.label :subject_id, class: 'fr-label' do
          = t('activerecord.models.subject.one')
          .loader.loader--sm.hidden{ data: { 'filters-target': 'loader' } }
        = f.collection_select :subject_id, filters[:subjects], :id, :label, { selected: params[:subject_id],
        include_blank: t('all.masculin') }, class: "fr-select", data: { 'filters-target': 'subjects' }

    .fr-col-12.fr-col-md-4
      - if filters[:regions].many?
        .fr-select-group
          = f.label :region_code, t('stats.stats_params.region'), class: 'fr-label'
          = f.collection_select :region_code, filters[:regions], :code, :nom, { selected: params[:region_code],
            include_blank: t('all.feminine') }, class: "fr-select"
      - if cooperation.with_provenance_details?
        .fr-input-group.fr-pr-2v
          .autocomplete-field{ 'data-autocomplete-url-value': "#{provenance_detail_autocomplete_conseiller_cooperations_path}", 'data-controller': 'autocomplete', 'data-autocomplete-min-length-value': 2 }
            = f.label :provenance_detail, t('stats.stats_params.provenance_detail'), class: 'fr-label'
            = f.hidden_field :provenance_detail, 'data-autocomplete-target': 'hidden'
            %input.fr-input{ 'data-autocomplete-target': 'input', type: 'text', value: params[:provenance_detail].presence }
            %ul.list-group{ 'data-autocomplete-target': 'results' }


    .fr-col-12
      .fr-input-group
        = f.submit t('stats.stats_params.filter'), class: 'fr-btn'
        - if request.fullpath.include?("?")
          = link_to t('clear_search'), request.fullpath.split('?').first, class: 'fr-btn fr-btn--tertiary-no-outline'
